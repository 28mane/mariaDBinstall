---
- hosts: mariadb
  vars:
     mysql_server_id: "{{ ansible_default_ipv4.address | ipaddr('int') }}"
     mariadb_my_config: ~/.my.cnf
     mariadb_service: mariadb
     mariadb_root_password: Admin@123
     mariadb_packages:
      - MariaDB-server 
      - MariaDB-client
      - MySQL-python
      - libselinux-python
      - python-netaddr
  tasks:
   - name: server ID
     become: true
     debug: 
       msg: "{{ mysql_server_id  }} and  {{ ansible_default_ipv4.address  }}"
     tags: server_ID
   
   - name: Install packages
     become: true
     package:
       name: "{{ item }}"
       state: installed
     with_items: "{{ mariadb_packages }}"
     tags: mariadb_packages

   - name: Ensure service is started
     become: true
     service:
       name: "{{ mariadb_service }}"
       state: started
       enabled: yes
     tags: mariadb_service

   - name: Update root password
     become: true
     mysql_user:
       name: root
       host: "{{ item }}"
       password: "{{ mariadb_root_password }}"
       state: present
     with_items:
       - "{{ ansible_hostname }}"
       - 127.0.0.1
       - ::1
       - localhost
     tags: mariadb_root_password_update

   - name: MYSQL_USER | Remove all anonymous users
     mysql_user: name='' host={{ item }} state=absent
     with_items:
       - "{{ ansible_hostname }}"
       - 127.0.0.1
       - ::1
       - localhost
     tags: mariadb_remove_anonymous_users

   - name: MYSQL_DB | Remove the test database
     mysql_db: name=test state=absent
     tags: mariadb_remove_test_database

   - name: Install ~/.my.cnf
     template:
       src: home_my.cnf.j2
       dest: "{{ mariadb_my_config }}"
       mode: '0600'
     tags: mariadb_my.cnf

- hosts: masterMariadb
  vars:
     mariadb_service: mariadb
     mysql_gtid_domain_id: 1
     mysql_server_id: "{{ ansible_default_ipv4.address | ipaddr('int') }}"
     mysql_max_binlog_size: "100M"
     mysql_expire_logs_days: "10"
     mysql_vendor: 'mariadb'
     mysql_replication_master: 192.168.235.140
     #mysql_replication_user: []
     #- name: repl
     #  host: 
     #  password: lper
     #  priv: 
     mysql_replication_user: 
         name: repl
         host: ""
         password: lper
         priv: '*.*:REPLICATION SLAVE,REPLICATION CLIENT'


  tasks:
   - name: MYSQL_VARIABLES | Get MySQL vendor
     become: true
     mysql_variables: variable=version
     register: vc
     #debug:
     # msg: "VC is --> {{ vc }}"
     tags: mariadb_version

   - name: SET_FACT | Server can use GTID
     become: true
     set_fact: mysql_gtid=true
     when: >
       ( mysql_vendor == 'mariadb' and vc.msg | version_compare('10.1.22', 'ge') )
     tags: mariadb_gitd

   - name: TEMPLATE | Deploy master configuration
     template: >
       src=/root/maridDBSetup/master.cnf.j2
       dest=/etc/my.cnf.d/master.cnf
     notify: restart mysql

   #- name: Create replication account 
   #  mysql_user: name=repl host="%" password=lper priv=*.*:"REPLICATION SLAVE" state=present 

   - name: Ensure replication user exists on master.
     mysql_user:
       name: "{{ mysql_replication_user.name }}"
       host: "{{ mysql_replication_user.host | default('%') }}"
       password: "{{ mysql_replication_user.password }}"
       priv: "{{ mysql_replication_user.priv | default('*.*:REPLICATION SLAVE,REPLICATION CLIENT') }}"
       state: present
     tags: replication_user

- hosts: slaveMariadb
  vars:
     mysql_slave_import_data: true
     mysql_slave_readonly: true
     mariadb_service: mariadb
     mysql_gtid_domain_id: 1
     mysql_server_id: "{{ ansible_default_ipv4.address | ipaddr('int') }}"
     mysql_max_binlog_size: "100M"
     mysql_expire_logs_days: "10"
     mysql_vendor: 'mariadb'
     mysql_replication_master: 192.168.235.140
     #mysql_replication_user: []
     #- name: repl
     #  host:
     #  password: lper
     #  priv:
#     mysql_replication_user: 
#         name: repl
#         host: 
#         password: lper
#         priv: 
     mysql_replication_user:
         name: repl
         host: ""
         password: lper
         priv: '*.*:REPLICATION SLAVE,REPLICATION CLIENT'

  tasks:
   - name: TEMPLATE | Deploy slave configuration
     template: >
       src=/root/maridDBSetup/slave.cnf.j2
       dest=/etc/my.cnf.d/slave.cnf
     notify: restart mysql

   - name: MYSQL_REPLICATION | Get slave status
     mysql_replication: mode=getslave
     ignore_errors: yes
     register: slave_status

   - name: INCLUDE | Import data
     include: import_data.yml
     when: slave_status.failed is defined and mysql_slave_import_data

   - name: Check slave replication status.
     mysql_replication:
       mode: getslave
       login_user: "{{ mysql_replication_user.name }}"
       login_password: "{{ mysql_replication_user.password }}"
     ignore_errors: true
     register: slave
   
   - name: Check master replication status.
     mysql_replication: mode=getmaster
     delegate_to: "{{ mysql_replication_master }}"
     register: master

   - name: Configure replication on the slave.
     mysql_replication:
       mode: changemaster
       master_host: "{{ mysql_replication_master }}"
       master_user: "{{ mysql_replication_user.name }}"
       master_password: "{{ mysql_replication_user.password }}"
       master_log_file: "{{ master.File }}"
       master_log_pos: "{{ master.Position }}"
     ignore_errors: True

   - name: Start replication.
     mysql_replication: mode=startslave
 
  handlers:
   - name: restart mysql
     service: 
       name: "{{ mariadb_service }}" 
       state: restarted




********************************
---
- hosts: all
  vars:
    db_file: "{{lookup('file','/home/wipro/girishWork/newMaria/mariaDBOpt/DbSetup.json') | from_json }}"
  tasks:
    - name: setting facts
      set_fact: db_setup="{{db_file.database_setup}}"
      register: db_setup
    - name: Printing hostname
      #debug: msg="{{ansible_hostname}}"
      set_fact: master_mariadb="{{db_file.master_mariadb}}" slave_mariadb="{{db_file.slave_mariadb}}"
      register: master_mariadb slave_mariadb
      template: >
       src=inventoryV1.j2
       dest=inventoryV1
      when: db_setup == "shared"
    - name: Printing fqdn
      debug: msg="{{ansible_fqdn}}"
      when: db_setup == "exclusive"




